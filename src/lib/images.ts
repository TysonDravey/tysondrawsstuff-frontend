import { StrapiImage } from './api';

// Import the image map generated by sync-images script
interface LocalImage {
  id: number;
  url: string;
  alternativeText: string;
  width: number;
  height: number;
  originalUrl: string;
}

type ImageMap = Record<string, LocalImage[]>;

let imageMap: ImageMap | null = null;
try {
  if (typeof window === 'undefined') {
    // Server-side: try to load the image map
    // eslint-disable-next-line @typescript-eslint/no-require-imports
    imageMap = require('../../public/image-map.json') as ImageMap;
  } else {
    // Client-side: image map not needed as we're using static paths
    imageMap = {};
  }
} catch {
  // Fallback if image map can't be loaded
  imageMap = {};
}

/**
 * Get static image URL for a product image
 * Falls back to Strapi URL if static image not found
 */
export function getProductImageUrl(productSlug: string, strapiImage: StrapiImage, index = 0): string {
  // Try to get static image first
  const productImages = imageMap?.[productSlug];
  if (productImages && productImages[index]) {
    return productImages[index].url;
  }

  // Fallback to Strapi URL only if we have environment variable
  if (typeof window !== 'undefined' || process.env.NEXT_PUBLIC_STRAPI_URL) {
    const strapiUrl = process.env.NEXT_PUBLIC_STRAPI_URL || 'http://localhost:1339';
    return `${strapiUrl}${strapiImage.url}`;
  }

  // If no env var and no static image, return a placeholder
  return '/images/placeholder.jpg';
}

/**
 * Get all static images for a product
 */
export function getProductImages(productSlug: string, strapiImages: StrapiImage[] = []): Array<{
  src: string;
  alt: string;
  width?: number;
  height?: number;
}> {
  const productImages = imageMap?.[productSlug];

  if (productImages && productImages.length > 0) {
    // Use static images
    return productImages.map((img: LocalImage) => ({
      src: img.url,
      alt: img.alternativeText,
      width: img.width,
      height: img.height
    }));
  }

  // Fallback to Strapi images only if we have environment variable
  if (typeof window !== 'undefined' || process.env.NEXT_PUBLIC_STRAPI_URL) {
    const strapiUrl = process.env.NEXT_PUBLIC_STRAPI_URL || 'http://localhost:1339';
    return strapiImages.map((img) => ({
      src: `${strapiUrl}${img.url}`,
      alt: img.alternativeText || '',
      width: img.width,
      height: img.height
    }));
  }

  // Return empty array if no env var and no static images
  return [];
}

/**
 * Get static URL for static assets (logo, etc.)
 * For now, fallback to Strapi URL since static assets aren't synced yet
 */
export function getStaticAssetUrl(strapiPath: string): string {
  // Fallback to Strapi URL only if we have environment variable
  if (typeof window !== 'undefined' || process.env.NEXT_PUBLIC_STRAPI_URL) {
    const strapiUrl = process.env.NEXT_PUBLIC_STRAPI_URL || 'http://localhost:1339';
    return `${strapiUrl}${strapiPath}`;
  }

  // If no env var and no static asset, return placeholder
  return '/images/placeholder.jpg';
}

/**
 * Get the site logo URL
 */
export function getLogoUrl(): string {
  return getStaticAssetUrl('/uploads/tysondrawsstuff_web_logo_06_e9ebe2d054.png');
}

/**
 * Check if we're using static images (image map exists)
 */
export function isUsingStaticImages(): boolean {
  return !!(imageMap && Object.keys(imageMap).length > 0);
}